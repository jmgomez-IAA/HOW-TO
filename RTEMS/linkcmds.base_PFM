/*  linkcmds
 *
 *  $Id$
 */

OUTPUT_ARCH(sparc)
__DYNAMIC  =  0;

/*
 * The memory map looks like this:
 * +--------------------+ <- low memory
 * | .text              |
 * |        etext       |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * |        _endtext    |
 * +--------------------+
 * | .data              | initialized data goes here
 * |        _sdata      |
 * |        _edata      |
 * +--------------------+
 * | .bss               |
 * |        __bss_start | start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * +--------------------+
 * |    heap space      |
 * |        _ENDHEAP    |
 * |    stack space     | 
 * |        __stack     | top of stack
 * +--------------------+ <- high memory
 */

_RAM_END = _RAM_START + _RAM_SIZE;

_PROM_END = _PROM_START + _PROM_SIZE;

/*
 *  Alternate names without leading _.
 */

PROM_START = _PROM_START;
PROM_SIZE = _PROM_SIZE;
PROM_END = _PROM_END;

RAM_START = _RAM_START;
RAM_SIZE = _RAM_SIZE;
RAM_END = _RAM_END;

/*
 * SPARC monitor assumes this is present to provide proper RTEMS awareness.
 */
EXTERN(rtems_get_version_string);

/*
 * stick everything in ram (of course)
 */
SECTIONS
{
  .text :
  {
    CREATE_OBJECT_SYMBOLS
    text_start = .;
    _text_start = .;
    
    /* RMM modification:
     * Does not add the C code of patch.o. They will be add later in patchText section
    */
    *(EXCLUDE_FILE  (*Patch.o ) .text*)    
    . = ALIGN (16);

    /*
     * Special FreeBSD sysctl sections.
     */
    . = ALIGN (16);
    __start_set_sysctl_set = .;
    *(set_sysctl_*);
    __stop_set_sysctl_set = ABSOLUTE(.);
    *(set_domain_*);
    *(set_pseudo_*);

    *(.eh_frame)
    . = ALIGN (16);

    *(.gnu.linkonce.t*)

    /*
     * C++ constructors
     */
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))

    _rodata_start = . ;
    
    /* RMM modification:
     * Does not add the contants of patch.o. They will be add later in patchData section
    */
    *(EXCLUDE_FILE (*Patch.o) .rodata*)   
     
    *(.gnu.linkonce.r*)
    
    _erodata = ALIGN( 0x10 ) ;

    etext = ALIGN(0x10);
    _etext = .;
    *(.init)
    *(.fini)
    *(.lit)
    *(.shdata)
    . = ALIGN (16);
    _endtext = .;
  } > ram
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
    } >ram
  .data :
  {
    data_start = .;
    _data_start = .;
    _sdata = . ;
    
    /* RMM modification:
     * Does not add the data of patch.o. They will be add later in patchData section
    */
    *(EXCLUDE_FILE  (*Patch.o ) .data*)    
    
    *(.gnu.linkonce.d*)
    *(.gcc_except_table*)
    . = ALIGN(0x10);
    edata = .;
    _edata = .;
  } > ram
  .dynamic	  : { *(.dynamic) 	} >ram
  .jcr		  : { *(.jcr) 		} >ram
  .got		  : { *(.got) 		} >ram
  .plt   	  : { *(.plt) 		} >ram
  .hash		  : { *(.hash)		} >ram
  .dynrel	  : { *(.dynrel)	} >ram
  .dynsym	  : { *(.dynsym)	} >ram
  .dynstr	  : { *(.dynstr)	} >ram
  .hash		  : { *(.hash)		} >ram
  .shbss :
  {
    *(.shbss)
  } > ram
   
  .bss :
  {
    __bss_start = ALIGN(0x8);
    _bss_start = .;
    bss_start = .;
    *(.bss .bss* .gnu.linkonce.b*)    
    /* RMM modification:
     * Does not add the global variables of patch.o. They will be add later in patchData section
    */
    *(EXCLUDE_FILE  (*Patch.o ) COMMON)    
    . = ALIGN (16);
    end = .;
    _end = ALIGN(0x8);
    __end = ALIGN(0x8);
  } > ram
  .stab . (NOLOAD) :
  {
    [ .stab ]
  }
  .stabstr . (NOLOAD) :
  {
    [ .stabstr ]
  }
  
  /* ====================================== PATCHTEXT section starts ===============================*/
  /* RMM modification
   * Fix the start position of patchText.
   * Remeber to include here all the info excluded (using the worg EXCLUDE_FILE) from previous sections
  */
  .patchText 0x40200400 :
  { 
    
    /* RMM modification
    * Declare the symbols used in the linkage
    */
    CREATE_OBJECT_SYMBOLS    
    patchText_start = .;
    _patchText_start = .;
    
    /* RMM modification
    * Does not delete the .patchText in linker section optimization using parameter --gc-sections calling linker from eclipse
    */
    KEEP (*(.patchText))
    
    /* RMM modification
     * Include the rest of .text sections, that is composed by de
     * code of Patch.o 
   */ 
    *(.text*)    
    
    /* RMM modification
     * Include the rest of elements declared in patchText section
    */
    *(.patchText)
    
    /* RMM modification
    * Final section aligment
    */
    . = ALIGN (16);
    
    /* ====================================== PATCHTEXT section ends ===============================*/
  } >ram
  
  
  /* ====================================== PATCHDATA section starts ===============================*/
   
  /* RMM modification
   * Fix the start position of patchData
   * Remeber to include here all the info excluded (using the worg EXCLUDE_FILE) from previous sections
  */
  .patchData 0x40267000 :
  {     
    /* RMM modification
    * Declare the symbols used in the linkage
    */    
    CREATE_OBJECT_SYMBOLS
    patchData_start = .;
    _patchData_start = .;
    
    /* RMM modification
    * Does not delete the .patchData in linker section optimization using parameter --gc-sections calling linker from eclipse
   */
    KEEP (*(.patchData))
    
   /* RMM modification
    * Include the rest of .data sections, that is composed by de
    * data of Patch.o 
   */ 
    *(.data*) 
    
    /* RMM modification
     * Include the rest of rodata sections, that is composed by de
     * contants variables of Patch.o 
   */        
    *(.rodata*)
    
    /* RMM modification
    /* Include the rest of COMMON sections, that is composed by de
     * global variables of Patch.o 
   */
    *(COMMON)


    /* RMM modification
     * Include the rest of elements declared in patchData section
    */
    *(.patchData)
     
    /* RMM modification
    * Final section aligment
    */

    . = ALIGN (16);

    /* ====================================== PATCHDATA section ends ===============================*/
    
  } >ram  
}

/* ====================================== END OF LINKER SCRIPT ===============================*/
